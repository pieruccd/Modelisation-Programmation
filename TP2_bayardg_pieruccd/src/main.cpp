#include "Dvector.h"
#include "assert.h"
#include <sstream>

int main(void)
{
	/*	Dvector v(3,2.5);
		assert(v.size() == 3);
		std::stringstream str;
		v.display(str);
		assert(str.str() == "2.5\n2.5\n2.5\n");
		std::cout<<"Constructeur Dvector(int, double) : OK\n";
		Dvector w(4);
		assert(w.size() == 4);
		w.display(str);
		assert(str.str() == "2.5\n2.5\n2.5\n0\n0\n0\n0\n");
		std::cout<<"Constructeur Dvector(int) : OK\n";
		Dvector u(0);
		assert(u.size()==0);
		std::cout<<"Constructeur Dvector() : OK\n";
		Dvector z(v);
		assert(z.size()==3);
		z.display(str);
		assert(str.str() == "2.5\n2.5\n2.5\n0\n0\n0\n0\n2.5\n2.5\n2.5\n");
		std::cout<<"Constructeur par copie : OK\n";
		Dvector x(2,0);
		assert(x.size()==2);
		assert(x.Case(0)>=0);
		assert(x.Case(0)<=1);
		assert(x.Case(1)>=0);
		assert(x.Case(1)<=1);
		std::cout<<"Remplissage random des cases : OK\n";
		Dvector s("tp1_test1.txt");
	//	s.display(std::cout);
	assert(s.size()==10);
	Dvector t("tp1_test2.txt");
	//	t.display(std::cout);
	assert(t.size() == 16737);*/
	Dvector v1(5);
	assert(v1.size() == 5);
	v1.fillRandomly();
	Dvector v2(8);
	assert(v2.size() == 8);
	v2.fillRandomly();
	Dvector v3(v2);
	//std::cout<<"v2 = \n";
	//v2.display(std::cout);
	//std::cout<<"\nv3 = \n";
	//v3.display(std::cout);
	assert(v3 == v2);
	v3 = v1;
	//std::cout<<"\n v1 = \n";
	//v1.display(std::cout);
	//std::cout<<"\n v3 = \n";
	//v3.display(std::cout);
	assert (v3 == v1);
	std::cout<<"opérateur d'affectation '=' : OK \n";
	Dvector v4(3,8);
	Dvector v5(3,4);
	v5+=(v4);
	//v5.display(std::cout);
	std::stringstream str;
	v5.display(str);
	assert(str.str() =="12\n12\n12\n");
	v5-=(v4);
	//v5.display(std::cout);
	v5.display(str);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n");
	v5*=(v4);
	v5.display(str);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n32\n32\n32\n");
	v5/=(v4);
	v5.display(str);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n32\n32\n32\n4\n4\n4\n");
	std::cout<<"opérateurs += (Dvector), -= (Dvector), *=(Dvector), /=(Dvector) : OK\n";
	v5+=10;
	v5-=4;
	v5*=10;
	v5/=50;
	v5.display(str);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n32\n32\n32\n4\n4\n4\n2\n2\n2\n");
	std::cout<<"opérateurs += (double), -= (double), *=(double), /=(double) : OK\n";
	v5.resize(4,7);
	v5.display(str);
assert(v5.size()==4);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n32\n32\n32\n4\n4\n4\n2\n2\n2\n2\n2\n2\n7\n");
	v5.resize(2,7);
assert(v5.size()==2);
	v5.display(str);
	assert(str.str() =="12\n12\n12\n4\n4\n4\n32\n32\n32\n4\n4\n4\n2\n2\n2\n2\n2\n2\n7\n2\n2\n");
std::cout<<"méthode 'resize' de changement de taille : OK\n";
	std::stringstream str1;
v5 = v5+v5;
Dvector v6(2,8);
assert(v6.size() == 2);
assert(v5.size() == v6.size());
v5 = v5-v6;
//v5.display(std::cout);
//v6.display(std::cout);
v5 = v5*v6;
//std::cout<<"yolo1\n";
//v5.display(std::cout);
//std::cout<<"yolo2\n";
v5 = v5/v6;
//v5.display(std::cout);
v5.display(str1);
assert(str1.str() == "-4\n-4\n");
std::cout<<"operateurs +(Dvector,Dvector), -(Dvector,Dvector), *(Dvector,Dvector), /(Dvector,Dvector) : OK \n";
v5 = v5+4;
v5= v5 - 9;
v5= v5 /3;
v5= v5 * -2;
v5= v5 + 4;
//v5.display(std::cout);
v5.display(str1);
assert(str1.str() == "-4\n-4\n10\n10\n");
std::cout<<"operateur +(Dvector, double), -(Dvector, double), *(Dvector, double), /(Dvector,double) : OK \n";



	/*	v1(0) = 0.0;
		const Dvector v2(1);
		double val = v2(0);
		Dvector v3(4);
		double val2 = v3(0);
		v3=v3+5.0;
		v3=v2;
		v3.display(std::cout);
		v3.resize(8,9);
		v3.display(std::cout); */
}
